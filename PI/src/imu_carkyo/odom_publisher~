#!/usr/bin/env python

import roslib  #; roslib.load_manifest('razor_imu_9dof')
import rospy

import serial
import string
import math
import tf
import re
from time import time, sleep
from sensor_msgs.msg    import NavSatFix
from sensor_msgs.msg    import NavSatStatus

#adding imu 

from sensor_msgs.msg import Imu
from geometry_msgs.msg import PoseWithCovariance
from geometry_msgs.msg import Quaternion


rospy.init_node("node1")
imu_pub = rospy.Publisher('imu/data1', Imu, queue_size=5)
imuMsg = Imu()
imuMsg.orientation_covariance = [0.01 , 0 , 0, 0, 0.01, 0, 0, 0, 0.01]
imuMsg.angular_velocity_covariance = [0.01, 0 , 0, 0 , 99999, 0, 0 , 0 , 0.02]
imuMsg.linear_acceleration_covariance = [0.01 , 0 , 0, 0 , 0.01, 0, 0 , 0 , 0.01]

#end imu

pub = rospy.Publisher('/fix', NavSatFix, queue_size=5)

GPSMsg = NavSatFix()
default_port='/dev/ttyACM0'
port = rospy.get_param('device', default_port)
ser = serial.Serial(port=port,baudrate=38400, timeout=1)

rospy.sleep(5) # Sleep for 8 seconds to wait for the board to boot then only write command.
#ser.write('#ox' + chr(13)) # To start display angle and sensor reading in text 
while 1:
    line = ser.readline()
    #rospy.loginfo(line)
   # line = line.replace(":",",")
    words = string.split(line,",")    # Fields split
    print words[0]
    if len(words) > 2:
        try:
            imuMsg.linear_acceleration.x = float(words[1])*9.80665/1000 # tripe axis accelerator meter
            imuMsg.linear_acceleration.y = float(words[3])*9.80665/1000
            imuMsg.linear_acceleration.z = float(words[5])*9.80665/1000
            #angular velocity is received deg/sec , convert it
  	    imuMsg.angular_velocity.x = float(words[7]) * math.pi /180.0
            imuMsg.angular_velocity.y = float(words[9]) * math.pi /180.0
            imuMsg.angular_velocity.z = float(words[11]) * math.pi /180.0
       	    imuMsg.orientation.x = float(words[13])
            imuMsg.orientation.y = float(words[15])
            imuMsg.orientation.z = float(words[17])
            imuMsg.orientation.w = float(words[19])
     	    GPSMsg.latitude = float(words[21])
            GPSMsg.longitude = float(words[23])
            GPSMsg.altitude = float(words[25])

        except Exception as e:
            print e
#	GPSMsg.header.seq= 1
        GPSMsg.header.stamp= rospy.Time.now()
        GPSMsg.header.frame_id = 'odom_frame'
        pub.publish(GPSMsg)
	imuMsg.header.frame_id = 'base_footprint' #'base_link'
        imuMsg.header.stamp= rospy.Time.now()
        imu_pub.publish(imuMsg)
    print GPSMsg #Gibt alle Sensorwerte in einer Art Tabelle aus
    print imuMsg

ser.close
