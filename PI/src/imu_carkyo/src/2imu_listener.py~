#!/usr/bin/env python
import rospy
import tf
import math
from std_msgs.msg import String
from ackermann_msgs.msg import AckermannDriveStamped
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu
from sensor_msgs.msg import NavSatFix

r1=0.0
p1=0.0
y1=0.0
r2=0.0
p2=0.0
y2=0.0
    
def callback_IMU1(data):
        global r1 , r2 , p1 , p2 , y1 , y2

        (r1, p1, y1) = tf.transformations.euler_from_quaternion([data.orientation.x, data.orientation.y, data.orientation.z, data.orientation.w])
        print("callback 1")
        print("yaw1 is")
       # print(y1*180.0 / math.pi)   
        print(data.orientation.w)
        print("yaw2 is")
        print(y2)
        print("diff is")
        print(y1*180.0 / math.pi-y2)
        rospy.Subscriber("/imu/data12", Imu, callback_IMU2)



def callback_IMU2(data):
        global r1 , r2 , p1 , p2 , y1 , y2
        


        y2=data.orientation.x
        print("callback 2")
        print("yaw1 is")
        print(y1*180.0 / math.pi)
        print("yaw2 is")
        print(y2)
        print("diff is")
        print(y1*180.0 / math.pi-y2)
        rospy.Subscriber("/imu/data1", Imu, callback_IMU1)


    
def listener():

    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber("/imu/data1", Imu, callback_IMU1)
    rospy.Subscriber("/imu/data12", Imu, callback_IMU2)


    rospy.spin()

if __name__ == '__main__':
    listener()
