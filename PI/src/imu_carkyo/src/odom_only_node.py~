#!/usr/bin/env python

import roslib 
import rospy

import serial
import string
import math
import tf
import re
from time import time, sleep

#adding odom 

from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovariance
from geometry_msgs.msg import TwistWithCovariance
from std_msgs.msg import Header
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import TransformStamped

tickR= 0.0
tickL= 0.0
previousL=0.0
previousR =0.0
x=0.0
y=0.0
th =0.0



ticksPerSpin = 1000
diameter = 30.0
lengthBetweenTwoWheels = 0.25
DistancePerCount = (math.pi * diameter) / ticksPerSpin

rospy.init_node("node_odom")
odom_pub = rospy.Publisher('/wheel/odom', Odometry, queue_size=5)
odom_broadcast = tf.TransformBroadcaster()

odomMsg = Odometry()
odomQuat = Quaternion()
#odomTrans = TransformStamped()

odomMsg.pose.covariance = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

odomMsg.twist.covariance = [0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1]

#end odom



default_port='/dev/ttyUSB2'
port = rospy.get_param('device', default_port)
ser = serial.Serial(port=port,baudrate=9600, timeout=1)


rospy.sleep(5) # Sleep for 8 seconds to wait for the board to boot then only write command.
#ser.write('#ox' + chr(13)) # To start display angle and sensor reading in text 
ser.write('0')
rospy.sleep(2)
ser.write('_')
rospy.sleep(4)
ser.write('_')
last_time =rospy.Time.now()
while 1:
    line = ser.readline()
    #line = line.replace(":",",")
    words = string.split(line,",")    # Fields split
    #words = [0,1,2] 
    print words[0]
    if len(words) > 1:
        try:
            tickR = float(words[1])
            tickL = float(words[2])
            print ("ticks")       
            print (tickR) 
            print (tickL)           

        except Exception as e:
            print e

    current_time =rospy.Time.now()
    deltaL = tickL - previousL
    deltaR = tickR - previousR
    vL= (deltaL * DistancePerCount)/(current_time - last_time).to_sec()
    vR= (deltaR * DistancePerCount)/(current_time - last_time).to_sec()
    vx= (vR + vL)/ 2.0
    vy= 0.0
    vth=(vR - vL)/ lengthBetweenTwoWheels
    dt = (current_time - last_time).to_sec()
    delta_x = (vx * math.cos(th)) * dt
    delta_y = (vy * math.sin(th)) * dt
    delta_th = vth * dt
    x += delta_x
    y += delta_y
    th += delta_th

#odom transform 
    
    #odomTrans.header.stamp = current_time
    #odomTrans.header.frame_id = "odom"
    #odomTrans.child_frame_id = "base_link"

    #odomTrans.transform.translation.x = x
    #odomTrans.transform.translation.y = y
    #odomTrans.transform.translation.z = 0.0
    #odomTrans.transform.rotation = 0.0
  
#odom message  
    odomMsg.pose.pose.position.x = x
    odomMsg.pose.pose.position.y = y
    odomMsg.pose.pose.position.z = 0.0

    odomMsg.pose.pose.orientation.x = 0.0
    odomMsg.pose.pose.orientation.y = 0.0
    odomMsg.pose.pose.orientation.z = 0.0
    odomMsg.pose.pose.orientation.w = 0.0

    odomMsg.twist.twist.linear.x = vx
    odomMsg.twist.twist.linear.y = vy
    odomMsg.twist.twist.linear.z = 0.0
   
    odomMsg.twist.twist.angular.x = 0.0
    odomMsg.twist.twist.angular.y = 0.0
    odomMsg.twist.twist.angular.z = vth

    odomMsg.header.frame_id = 'odom'
    odomMsg.child_frame_id = 'base_link'
    odomMsg.header.stamp= rospy.Time.now()
    #p= rospy.Time.now()

    odom_pub.publish(odomMsg)
    #odom_broadcast .sendTransform(odomTrans)

    print odomMsg
    previousL = tickL
    previousR = tickR
    last_time = current_time


ser.close
